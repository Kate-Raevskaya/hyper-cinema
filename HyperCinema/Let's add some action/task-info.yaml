type: edu
files:
- name: src/index.html
  visible: true
  text: |-
    <!doctype html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Document</title>
    </head>
    <body>

    </body>
    </html>
  learner_created: false
- name: test/test.js
  visible: false
  text: "import path from 'path';\nconst pagePath = path.join(import.meta.url, '../../src/index.html');\n\
    import {StageTest, correct, wrong} from 'hs-test-web';\n\nfunction sleep(milliseconds)\
    \ {\n    const date = Date.now();\n    let currentDate = null;\n    do {\n   \
    \     currentDate = Date.now();\n    } while (currentDate - date < milliseconds);\n\
    }\n\nfunction nonStrictCompare(a, b, offset) {\n    if (!offset) {\n        offset\
    \ = 10;\n    }\n    return Math.abs(a - b) < offset;\n}\n\nclass Test extends\
    \ StageTest {\n\n    page = this.getPage(pagePath)\n\n    tests = [\n        //\
    \ Test 1 - check main-title\n        this.node.execute(async () => {\n       \
    \     await this.page.setViewport({width: 1440, height: 2776});\n            const\
    \ title = await this.page.findBySelector('#main-title');\n            return title\
    \ ?\n                correct() :\n                wrong(`Your page must contain\
    \ a main-title element.`)\n        }),\n        // Test 2 - check video\n    \
    \    this.page.execute(() => {\n            this.video = document.getElementsByTagName('video');\n\
    \n            return this.video.length > 0 ?\n                correct() :\n  \
    \              wrong(`Your page should contain a video tag.`)\n        }),\n \
    \       // Test 3 - check video position\n        this.node.execute(async () =>\
    \ {\n            let videoCoords = await this.page.evaluate(async () => {\n  \
    \              let video = document.getElementsByTagName('video')[0];\n      \
    \          return [video.getBoundingClientRect().x, video.getBoundingClientRect().y];\n\
    \            });\n            return videoCoords[0] === 90 && nonStrictCompare(videoCoords[1],\
    \ 134) ?\n                correct() :\n                wrong(`Check position of\
    \ video element, your positions now: x=${videoCoords[0]} and y=${videoCoords[1]}.`);\n\
    \        }),\n        // Test 4 - check name\n        this.page.execute(() =>\
    \ {\n            this.nameEl = document.getElementsByClassName('name');\n\n  \
    \          return this.nameEl.length > 0 ?\n                correct() :\n    \
    \            wrong(`Your page should contain a name element.`)\n        }),\n\
    \        // Test 5 - check description\n        this.page.execute(() => {\n  \
    \          this.description = document.getElementsByClassName('description');\n\
    \n            return this.description.length > 0 ?\n                correct()\
    \ :\n                wrong(`Your page should contain a description element.`)\n\
    \        }),\n        // Test 6 - check table\n        this.page.execute(() =>\
    \ {\n            this.table = document.getElementsByTagName('table');\n\n    \
    \        return this.table.length > 0 ?\n                correct() :\n       \
    \         wrong(`Your page should contain a table tag.`)\n        }),\n      \
    \  // Test 7 - check buttons\n        this.page.execute(() => {\n            this.buttons\
    \ = document.getElementsByTagName('button');\n\n            return this.buttons.length\
    \ === 2 ?\n                correct() :\n                wrong(`Your page should\
    \ contain 2 button elements.`)\n        }),\n        // Test 8 - check buttons\
    \ position\n        this.node.execute(async () => {\n            let buttonCoords\
    \ = await this.page.evaluate(async () => {\n                let buttonEl1 = document.getElementsByTagName('button')[0];\n\
    \                let buttonEl2 = document.getElementsByTagName('button')[1];\n\
    \                return [buttonEl1.getBoundingClientRect().x, buttonEl1.getBoundingClientRect().y,\n\
    \                    buttonEl2.getBoundingClientRect().x, buttonEl2.getBoundingClientRect().y];\n\
    \            });\n            return nonStrictCompare(buttonCoords[0], 955) &&\
    \ nonStrictCompare(buttonCoords[1], 592) &&\n            nonStrictCompare(buttonCoords[2],\
    \ 1170) && nonStrictCompare(buttonCoords[3], 592) ?\n                correct()\
    \ :\n                wrong(`Check position of buttons element. Now your project\
    \ has the following values of buttons elements: \n                left button\
    \ coordinates - x=${buttonCoords[0]} and y=${buttonCoords[1]}, \n            \
    \    right button coordinates - x=${buttonCoords[2]} and y=${buttonCoords[3]}`);\n\
    \        }),\n        //Test 9 - check section-header\n        this.page.execute(()\
    \ => {\n            this.actorsHeader = document.querySelectorAll('.section-header');\n\
    \n            return this.actorsHeader.length === 2 ?\n                correct()\
    \ :\n                wrong(`Your page should contain 2 .section-header elements.`)\n\
    \        }),\n        //Test 10 - check font section-header //TODO\n        this.page.execute(()\
    \ => {\n            let actorsHeaderStyles = window.getComputedStyle(this.actorsHeader[0]);\n\
    \            let reviewsHeaderStyles = window.getComputedStyle(this.actorsHeader[1]);\n\
    \            return actorsHeaderStyles.fontSize === '32px' && actorsHeaderStyles.fontWeight\
    \ === '700' &&\n            actorsHeaderStyles.fontFamily.includes('Montserrat')\
    \ && reviewsHeaderStyles.fontSize === \"32px\" &&\n            reviewsHeaderStyles.fontWeight\
    \ === '700' && reviewsHeaderStyles.fontFamily.includes('Montserrat')?\n      \
    \          correct() :\n                wrong(`Check font of .section-header elements.`)\n\
    \        }),\n        //Test 11 - check position section-header\n        this.node.execute(async\
    \ () => {\n            let ahCoords = await this.page.evaluate(async () => {\n\
    \                let actors = document.getElementsByClassName('section-header')[0];\n\
    \                let reviews = document.getElementsByClassName('section-header')[1];\n\
    \                return [actors.getBoundingClientRect().x, actors.getBoundingClientRect().y,\n\
    \                    reviews.getBoundingClientRect().x, reviews.getBoundingClientRect().y];\n\
    \            });\n            return ahCoords[0] === 90 && nonStrictCompare(ahCoords[1],\
    \ 786) &&\n            ahCoords[2] === 90 && nonStrictCompare(ahCoords[3], 1270)\
    \ ?\n                correct() :\n                wrong(`Check position of .section-header\
    \ element, your positions of first header are: x=${ahCoords[0]} and y=${ahCoords[1]},\
    \ and positions of second:  \n                x=${ahCoords[2]} and y=${ahCoords[3]}`);\n\
    \        }),\n        //Test 12 - check article\n        this.page.execute(()\
    \ => {\n            this.articleObj = document.querySelectorAll('#actors-list\
    \ article');\n\n            return this.articleObj.length === 7 ?\n          \
    \      correct() :\n                wrong(`Your page should contain 7 article\
    \ elements inside #actors-list element.`)\n        }),\n        //Test 13 - check\
    \ first article position\n        this.node.execute(async () => {\n          \
    \  let arCoords = await this.page.evaluate(async () => {\n                let\
    \ arObj = document.querySelector('#actors-list article');\n                return\
    \ [arObj.getBoundingClientRect().x, arObj.getBoundingClientRect().y];\n      \
    \      });\n            return arCoords[0] === 90 && Math.abs(arCoords[1] - 865)\
    \ < 10 ?\n                correct() :\n                wrong(`Check position of\
    \ first article element. Now your project has the following values of first article\
    \ element: \n                x-coordinate=${arCoords[0]} and y-coordinate=${arCoords[1]}.`);\n\
    \        }),\n        // Test 14 - check reviews-list article\n        this.page.execute(()\
    \ => {\n            this.articleObj = document.querySelectorAll('#reviews-list\
    \ article');\n            this.gradeObj = document.querySelectorAll('#reviews-list\
    \ article .grade');\n            return this.articleObj.length >= 3 && this.gradeObj.length\
    \ >= 3 ?\n                correct() :\n                wrong(`Your page must contain\
    \ at least 3 reviews with 3 grades.`)\n        }),\n        // Test 15 - check\
    \ position of first reviews-list article\n        this.node.execute(async () =>\
    \ {\n            let coords = await this.page.evaluate(async () => {\n       \
    \         let obj = document.querySelector('#reviews-list article');\n       \
    \         return [obj.getBoundingClientRect().x, obj.getBoundingClientRect().y];\n\
    \            });\n            return coords[0] === 90 && nonStrictCompare(coords[1],\
    \ 1348) ?\n                correct() :\n                wrong(`Please, check position\
    \ of your first review, your positions now: x=${coords[0]} and ${coords[1]}.`)\n\
    \        }),\n        // Test 16 - check size of first reviews-list article\n\
    \        this.node.execute(async () => {\n            let width = await this.page.evaluate(async\
    \ () => {\n                let obj = document.querySelectorAll('#reviews-list\
    \ article')[0];\n                return obj.getBoundingClientRect().width\n  \
    \          });\n            return nonStrictCompare(width, 936, 5) ?\n       \
    \         correct() :\n                wrong(`Please check the width of the element\
    \ with review, your width now - ${width}px.`)\n        }),\n        // Test 17\
    \ - check transform-animation of button\n        this.node.execute(async () =>\
    \ {\n            const button = await this.page.findBySelector('button');\n  \
    \          await button.hover();\n            sleep(400);\n            const hoverButton\
    \ = await this.page.findBySelector('button:hover');\n\n            let styles\
    \ = [];\n            if(hoverButton) {\n                styles = await hoverButton.getComputedStyles();\n\
    \            }\n\n            return styles.transform === 'matrix(1, 0, 0, 1,\
    \ 10, -10)' &&\n            styles.boxShadow === 'rgb(33, 33, 33) -10px 10px 0px\
    \ 0px' ?\n                correct() :\n                wrong(`Please check transform\
    \ and box-shadow-animation after button hovering. Now you have transform=${styles.transform}\
    \ and boxShadow=${styles.boxShadow} after hover.`)\n        }),\n        // Test\
    \ 18 - check time of transform-animation of button\n        this.node.execute(async\
    \ () => {\n            const b = await this.page.findAllBySelector('button');\n\
    \            const button = b[1];\n            await button.hover();\n       \
    \     const hoverButton = await this.page.findBySelector('button:hover');\n\n\
    \            let styles = [];\n            if(hoverButton) {\n               \
    \ styles = await hoverButton.getComputedStyles();\n            }\n           \
    \ return styles.transform !== 'matrix(1, 0, 0, 1, 10, -10)' &&\n            styles.boxShadow\
    \ !== 'rgb(33, 33, 33) -10px 10px 0px 0px' ?\n                correct() :\n  \
    \              wrong(`Please check time of animation after button hovering.`)\n\
    \        }),\n        // Test 19 - check animation of actor\n        this.node.execute(async\
    \ () => {\n            const actor = await this.page.findBySelector('#actors-list\
    \ article');\n            await actor.hover();\n            sleep(400);\n    \
    \        const hoverButton = await this.page.findBySelector('#actors-list article:hover');\n\
    \n            let styles = null;\n            if (hoverButton) styles = await\
    \ hoverButton.getComputedStyles();\n\n            let isTransform = false;\n \
    \           let isBoxShadow = false;\n            if (styles) {\n            \
    \    let transformMatch = styles.transform.match(/matrix\\(1, 0, 0, 1, (?<first>.+),\
    \ (?<second>.+)\\)/);\n                if(transformMatch) {\n                \
    \    isTransform = transformMatch.groups.first && Math.round(transformMatch.groups.first)\
    \ === 10 &&\n                        transformMatch.groups.second && Math.round(transformMatch.groups.second)\
    \ === -10;\n                }\n\n                let boxShadowMatch = styles.boxShadow.match(/rgb\\\
    (33, 33, 33\\) (?<first>.+)px (?<second>.+)px 0px 0px/);\n                if(boxShadowMatch)\
    \ {\n                    isBoxShadow = boxShadowMatch.groups.first && Math.round(boxShadowMatch.groups.first)\
    \ === -10 &&\n                        boxShadowMatch.groups.second && Math.round(boxShadowMatch.groups.second)\
    \ === 10;\n                }\n            }\n            let errorString = `Please\
    \ check transform and box-shadow-animation after actor hovering.`;\n         \
    \   if (!styles) {\n                errorString += ` The test script cannot find\
    \ the <#actors-list article:hover> element after focusing on the button :(`;\n\
    \            }\n            return isTransform && isBoxShadow ?\n            \
    \    correct() :\n                wrong(errorString)\n        }),\n\n        //\
    \ Test 20 - check summary\n        this.page.execute(() => {\n            this.summary\
    \ = document.querySelector('.reviews-summary');\n\n            return this.summary\
    \ ?\n                correct() :\n                wrong(`Your page should contain\
    \ .reviews-summary element.`)\n        }),\n        // Test 21 - check border\
    \ of summary\n        this.page.execute(() => {\n            let borderLeft =\
    \ window.getComputedStyle(this.summary).borderLeft;\n            return  borderLeft\
    \ === '2px solid rgb(0, 0, 0)' ?\n                correct() :\n              \
    \  wrong(`Please, check left border of your summary element.`)\n        }),\n\
    \        // Test 22 - check fonts of summary\n        this.page.execute(() =>\
    \ {\n            let rn = document.querySelector('.reviews-summary .reviews-number')\
    \ ?\n                window.getComputedStyle(document.querySelector('.reviews-summary\
    \ .reviews-number')) : [];\n            let rnp = document.querySelector('.reviews-summary\
    \ .reviews-number.positive') ?\n                window.getComputedStyle(document.querySelector('.reviews-summary\
    \ .reviews-number.positive')) : [];\n            let rnn = document.querySelector('.reviews-summary\
    \ .reviews-number.negative') ?\n                window.getComputedStyle(document.querySelector('.reviews-summary\
    \ .reviews-number.negative')) : [];\n            let rns = document.querySelector('.reviews-summary\
    \ .reviews-number span') ?\n                window.getComputedStyle(document.querySelector('.reviews-summary\
    \ .reviews-number span')) : [];\n\n            let caption = document.querySelector('.reviews-summary\
    \ .caption') ?\n                window.getComputedStyle(document.querySelector('.reviews-summary\
    \ .caption')) : [];\n\n            let flag = rn.fontSize === '30px' && rn.fontWeight\
    \ === '500' && rn.color === 'rgb(0, 0, 0)' &&\n            rnp.color === 'rgb(48,\
    \ 207, 127)' && rnn.color === 'rgb(207, 48, 48)' &&\n            rns.color ===\
    \ 'rgb(0, 0, 0)' && rns.fontSize === '16px' && rns.fontWeight === '400' && rns.opacity\
    \ === '0.4' &&\n            caption.fontSize === '16px' && caption.fontWeight\
    \ === '400';\n\n            return  flag ?\n                correct() :\n    \
    \            wrong(`Please, check fonts of your summary element and child elements\
    \ of it.`)\n        }),\n        // Test 23 - check internal positions of summary\n\
    \        this.node.execute(async () => {\n            let coords = await this.page.evaluate(async\
    \ () => {\n                let summary = document.querySelector('.reviews-summary')\
    \ ?\n                    document.querySelector('.reviews-summary').getBoundingClientRect()\
    \ : [];\n                let rn1 = document.querySelectorAll('.reviews-summary\
    \ .reviews-number')[0] ?\n                    document.querySelectorAll('.reviews-summary\
    \ .reviews-number')[0].getBoundingClientRect() : [];\n                let rn2\
    \ = document.querySelectorAll('.reviews-summary .reviews-number')[1] ?\n     \
    \               document.querySelectorAll('.reviews-summary .reviews-number')[1].getBoundingClientRect()\
    \ : [];\n\n                let caption1 = document.querySelectorAll('.reviews-summary\
    \ .caption')[0] ?\n                    document.querySelectorAll('.reviews-summary\
    \ .caption')[0].getBoundingClientRect() : [];\n                return [rn1.x,\
    \ rn1.y-summary.y, rn2.x, rn2.y-summary.y, caption1.x, caption1.y-summary.y];\n\
    \            });\n            return nonStrictCompare(coords[0], 1189) && coords[2]\
    \ === coords[0] && coords[4] === coords[0] &&\n                nonStrictCompare(coords[1],\
    \ 15, 6) && nonStrictCompare(coords[3], 102, 5)\n                && nonStrictCompare(coords[5],\
    \ 51, 5)\n                ?\n                correct() :\n                wrong(`Please,\
    \ check internal positions of your .review-summary element.`)\n        }),\n\n\
    \        // Test 24 - check sticky position of summary\n        this.node.execute(async\
    \ () => {\n            const reviews = await this.page.findBySelector('#reviews-list');\n\
    \            const styles = await reviews.getComputedStyles();\n            let\
    \ height = parseInt(styles.height.slice(0, -2)) / 2;\n            await this.page.setViewport({width:\
    \ 1440, height: Math.round(height)});\n            const positions = await this.page.evaluate(async\
    \ () => {\n                let y1 = document.querySelector('.reviews-summary')\
    \ ? document.querySelector('.reviews-summary').getBoundingClientRect().y : [];\n\
    \                window.scrollTo(0, document.body.scrollHeight);\n           \
    \     let y2 = document.querySelector('.reviews-summary') ? document.querySelector('.reviews-summary').getBoundingClientRect().y\
    \ : [];\n                return [y1, y2];\n            });\n            return\
    \ nonStrictCompare(positions[0], 1348) && Math.abs(positions[1]) < 5 ?\n     \
    \           correct() :\n                wrong('Your summary element should \"\
    stick\" to the top of the page when you scroll down.');\n        })\n    ]\n\n\
    }\n\nit(\"Test stage\", async () => {\n        await new Test().runTests()\n \
    \   }\n).timeout(30000);\n"
  learner_created: false
- name: src/style.css
  visible: true
  learner_created: true
- name: src/script.js
  visible: true
  learner_created: true
- name: src/images/Mike-Myers.jpg
  visible: true
  learner_created: true
- name: src/images/Eddie-Murphy.jpg
  visible: true
  learner_created: true
- name: src/images/Cameron-Diaz.jpg
  visible: true
  learner_created: true
- name: src/images/John-Lithgow.png
  visible: true
  learner_created: true
- name: src/images/Vincent-Cassel.jpg
  visible: true
  learner_created: true
- name: src/images/Andrew-Adamson.png
  visible: true
  learner_created: true
- name: src/images/Elisa-Gabrielli.jpg
  visible: true
  learner_created: true
- name: src/images/poster.webp
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/22777#comment
status: Failed
feedback:
  message: |-
    Error: Wrong answer in test #17

    Please check transform and box-shadow-animation after button hovering. Now you have transform=matrix(1, 0, 0, 1, 10, -10) and boxShadow=rgb(0, 0, 0) -10px 10px 0px 0px after hover.
  time: "Thu, 15 Jun 2023 11:28:16 UTC"
record: -1
