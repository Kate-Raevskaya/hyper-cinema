type: edu
custom_name: Always check the reviews!
files:
- name: src/index.html
  visible: true
  text: |-
    <!doctype html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Document</title>
    </head>
    <body>

    </body>
    </html>
  learner_created: false
- name: test/test.js
  visible: false
  text: "import path from 'path';\nconst pagePath = path.join(import.meta.url, '../../src/index.html');\n\
    import {StageTest, correct, wrong} from 'hs-test-web';\n\nfunction nonStrictCompare(a,\
    \ b, offset) {\n    if (!offset) {\n        offset = 10;\n    }\n    return Math.abs(a\
    \ - b) < offset;\n}\n\nclass Test extends StageTest {\n\n    page = this.getPage(pagePath)\n\
    \n    tests = [\n        // Test 1 - check main-title\n        this.node.execute(async\
    \ () => {\n            await this.page.setViewport({width: 1440, height: 2776});\n\
    \            const title = await this.page.findBySelector('#main-title');\n  \
    \          return title ?\n                correct() :\n                wrong(`Your\
    \ page must contain a main-title element.`)\n        }),\n        // Test 2 -\
    \ check video\n        this.page.execute(() => {\n            this.video = document.getElementsByTagName('video');\n\
    \n            return this.video.length > 0 ?\n                correct() :\n  \
    \              wrong(`Your page should contain a video tag.`)\n        }),\n \
    \       // Test 3 - check video position\n        this.node.execute(async () =>\
    \ {\n            let videoCoords = await this.page.evaluate(async () => {\n  \
    \              let video = document.getElementsByTagName('video')[0];\n      \
    \          return [video.getBoundingClientRect().x, video.getBoundingClientRect().y];\n\
    \            });\n            return videoCoords[0] === 90 && nonStrictCompare(videoCoords[1],\
    \ 134) ?\n                correct() :\n                wrong(`Check position of\
    \ video element, your positions now: x=${videoCoords[0]} and y=${videoCoords[1]}.`);\n\
    \        }),\n        // Test 4 - check name\n        this.page.execute(() =>\
    \ {\n            this.nameEl = document.getElementsByClassName('name');\n\n  \
    \          return this.nameEl.length > 0 ?\n                correct() :\n    \
    \            wrong(`Your page should contain a name element.`)\n        }),\n\
    \        // Test 5 - check description\n        this.page.execute(() => {\n  \
    \          this.description = document.getElementsByClassName('description');\n\
    \n            return this.description.length > 0 ?\n                correct()\
    \ :\n                wrong(`Your page should contain a description element.`)\n\
    \        }),\n        // Test 6 - check table\n        this.page.execute(() =>\
    \ {\n            this.table = document.getElementsByTagName('table');\n\n    \
    \        return this.table.length > 0 ?\n                correct() :\n       \
    \         wrong(`Your page should contain a table tag.`)\n        }),\n      \
    \  // Test 7 - check buttons\n        this.page.execute(() => {\n            this.buttons\
    \ = document.getElementsByTagName('button');\n\n            return this.buttons.length\
    \ === 2 ?\n                correct() :\n                wrong(`Your page should\
    \ contain 2 button elements.`)\n        }),\n        // Test 8 - check buttons\
    \ position\n        this.node.execute(async () => {\n            let buttonCoords\
    \ = await this.page.evaluate(async () => {\n                let buttonEl1 = document.getElementsByTagName('button')[0];\n\
    \                let buttonEl2 = document.getElementsByTagName('button')[1];\n\
    \                return [buttonEl1.getBoundingClientRect().x, buttonEl1.getBoundingClientRect().y,\n\
    \                    buttonEl2.getBoundingClientRect().x, buttonEl2.getBoundingClientRect().y];\n\
    \            });\n            return nonStrictCompare(buttonCoords[0], 955) &&\
    \ nonStrictCompare(buttonCoords[1], 592) &&\n            nonStrictCompare(buttonCoords[2],\
    \ 1170) && nonStrictCompare(buttonCoords[3], 592) ?\n                correct()\
    \ :\n                wrong(`Check position of buttons element. Now your project\
    \ has the following values of buttons elements: \n                left button\
    \ coordinates - x=${buttonCoords[0]} and y=${buttonCoords[1]}, \n            \
    \    right button coordinates - x=${buttonCoords[2]} and y=${buttonCoords[3]}`);\n\
    \        }),\n        //Test 9 - check section-header\n        this.page.execute(()\
    \ => {\n            this.actorsHeader = document.querySelectorAll('.section-header');\n\
    \n            return this.actorsHeader.length === 2 ?\n                correct()\
    \ :\n                wrong(`Your page should contain 2 .section-header elements.`)\n\
    \        }),\n        //Test 10 - check font section-header\n        this.page.execute(()\
    \ => {\n            let actorsHeaderStyles = window.getComputedStyle(this.actorsHeader[0]);\n\
    \            let reviewsHeaderStyles = window.getComputedStyle(this.actorsHeader[1]);\n\
    \            return actorsHeaderStyles.fontSize === '32px' && actorsHeaderStyles.fontWeight\
    \ === '700' &&\n                actorsHeaderStyles.fontFamily.includes('Montserrat')\
    \ && reviewsHeaderStyles.fontSize === \"32px\" &&\n                reviewsHeaderStyles.fontWeight\
    \ === '700' && reviewsHeaderStyles.fontFamily.includes('Montserrat')?\n      \
    \          correct() :\n                wrong(`Check font of .section-header elements.`)\n\
    \        }),\n        //Test 11 - check position section-header\n        this.node.execute(async\
    \ () => {\n            let ahCoords = await this.page.evaluate(async () => {\n\
    \                let actors = document.getElementsByClassName('section-header')[0];\n\
    \                let reviews = document.getElementsByClassName('section-header')[1];\n\
    \                return [actors.getBoundingClientRect().x, actors.getBoundingClientRect().y,\n\
    \                    reviews.getBoundingClientRect().x, reviews.getBoundingClientRect().y];\n\
    \            });\n            return ahCoords[0] === 90 && nonStrictCompare(ahCoords[1],\
    \ 786) &&\n            ahCoords[2] === 90 && nonStrictCompare(ahCoords[3], 1270)\
    \ ?\n                correct() :\n                wrong(`Check position of .section-header\
    \ element, your positions of first header are: x=${ahCoords[0]} and y=${ahCoords[1]},\
    \ and positions of second:  \n                x=${ahCoords[2]} and y=${ahCoords[3]}`);\n\
    \        }),\n        //Test 12 - check article\n        this.page.execute(()\
    \ => {\n            this.articleObj = document.querySelectorAll('#actors-list\
    \ article');\n\n            return this.articleObj.length === 7 ?\n          \
    \      correct() :\n                wrong(`Your page should contain 7 article\
    \ elements inside #actors-list element.`)\n        }),\n        //Test 13 - check\
    \ first article position\n        this.node.execute(async () => {\n          \
    \  let arCoords = await this.page.evaluate(async () => {\n                let\
    \ arObj = document.querySelector('#actors-list article');\n                return\
    \ [arObj.getBoundingClientRect().x, arObj.getBoundingClientRect().y];\n      \
    \      });\n            return arCoords[0] === 90 && nonStrictCompare(arCoords[1],\
    \ 865) ?\n                correct() :\n                wrong(`Check position of\
    \ first article element. Now your project has the following values of first article\
    \ element: \n                x-coordinate=${arCoords[0]} and y-coordinate=${arCoords[1]}.`);\n\
    \        }),\n        // Test 14 - check reviews-list article\n        this.page.execute(()\
    \ => {\n            this.articleObj = document.querySelectorAll('#reviews-list\
    \ article');\n            this.gradeObj = document.querySelectorAll('#reviews-list\
    \ article .grade');\n            return this.articleObj.length >= 3 && this.gradeObj.length\
    \ >= 3 ?\n                correct() :\n                wrong(`Your page must contain\
    \ at least 3 reviews with 3 grades.`)\n        }),\n        // Test 15 - check\
    \ reviews-list article border\n        this.page.execute(() => {\n           \
    \ let styles = window.getComputedStyle(this.articleObj[0]);\n\n            return\
    \ styles.border === \"1px solid rgb(0, 0, 0)\" && styles.borderRadius === \"10px\"\
    \ ?\n                correct() :\n                wrong(`Please, check borders\
    \ of review article.`)\n        }),\n        // Test 16 - check position of first\
    \ reviews-list article\n        this.node.execute(async () => {\n            let\
    \ coords = await this.page.evaluate(async () => {\n                let obj = document.querySelector('#reviews-list\
    \ article');\n                return [obj.getBoundingClientRect().x, obj.getBoundingClientRect().y];\n\
    \            });\n            return coords[0] === 90 && nonStrictCompare(coords[1],\
    \ 1348) ?\n                correct() :\n                wrong(`Please, check position\
    \ of your first review, your positions now: x=${coords[0]} and ${coords[1]}.`)\n\
    \        }),\n        // Test 17 - check position of second reviews-list article\n\
    \        this.node.execute(async () => {\n            let coords = await this.page.evaluate(async\
    \ () => {\n                let obj = document.querySelectorAll('#reviews-list\
    \ article')[1];\n                let obj0 = document.querySelectorAll('#reviews-list\
    \ article')[0];\n                return [obj.getBoundingClientRect().x, obj.getBoundingClientRect().y,\
    \ obj0.getBoundingClientRect().y, obj0.getBoundingClientRect().height];\n    \
    \        });\n            return coords[0] === 90 && Math.round(coords[1] - coords[2]\
    \ - coords[3]) === 40 ?\n                correct() :\n                wrong(`Please,\
    \ check position of your second review. Now your project has the following values\
    \ of second review element: \n                x-coordinate=${coords[0]} and the\
    \ distance between the second and first elements of the reviews is ${coords[1]\
    \ - coords[2] - coords[3]}.`)\n        }),\n        // Test 18 - check size of\
    \ first reviews-list article\n        this.node.execute(async () => {\n      \
    \      let width = await this.page.evaluate(async () => {\n                let\
    \ obj = document.querySelectorAll('#reviews-list article')[0];\n             \
    \   return obj.getBoundingClientRect().width\n            });\n            return\
    \ nonStrictCompare(width, 936, 5) ?\n                correct() :\n           \
    \     wrong(`Please check the width of the element with review, your width now\
    \ - ${width}px.`)\n        }),\n        // Test 19 - check position of first reviews-list\
    \ article span\n        this.node.execute(async () => {\n            let coords\
    \ = await this.page.evaluate(async () => {\n                let obj = document.querySelector('#reviews-list\
    \ article .date');\n                return obj ? [obj.getBoundingClientRect().x,\
    \ obj.getBoundingClientRect().y] : [-1, -1];\n            });\n            return\
    \ nonStrictCompare(coords[0], 130, 5) && nonStrictCompare(coords[1], 1392) ?\n\
    \                correct() :\n                wrong(`Please, check position of\
    \ your first .date element, your position: x=${coords[0]} and y=${coords[1]}.`)\n\
    \        }),\n        // Test 20 - check position of first reviews-list article\
    \ h1\n        this.node.execute(async () => {\n            let coords = await\
    \ this.page.evaluate(async () => {\n                let obj = document.querySelector('#reviews-list\
    \ article h1');\n                return obj ? [obj.getBoundingClientRect().x,\
    \ obj.getBoundingClientRect().y] : [-1, -1];\n            });\n            return\
    \ nonStrictCompare(coords[0], 130, 5) && nonStrictCompare(coords[1], 1435) ?\n\
    \                correct() :\n                wrong(`Please, check position of\
    \ your first h1 element of article, your position - x=${coords[0]} and y=${coords[1]}.`)\n\
    \        }),\n        // Test 21 - check position of first reviews-list article\
    \ p\n        this.node.execute(async () => {\n            let coords = await this.page.evaluate(async\
    \ () => {\n                let obj = document.querySelector('#reviews-list article\
    \ p');\n                return obj ? [obj.getBoundingClientRect().x, obj.getBoundingClientRect().y]\
    \ : [-1, -1];\n            });\n            return nonStrictCompare(coords[0],\
    \ 130, 5) && nonStrictCompare(coords[1], 1480, 15) ?\n                correct()\
    \ :\n                wrong(`Please, check position of your first p element of\
    \ article, your position - x=${coords[0]} and y=${coords[1]}.`)\n        }),\n\
    \        // Test 22 - check fonts of all elements of article\n        this.page.execute(()\
    \ => {\n            let date = window.getComputedStyle(document.querySelector('#reviews-list\
    \ article .date'));\n            let h1Obj = window.getComputedStyle(document.querySelector('#reviews-list\
    \ article h1'));\n            let pObj = window.getComputedStyle(document.querySelector('#reviews-list\
    \ article p'));\n\n            let dateOk = date.fontWeight === '300' && date.fontSize\
    \ === '14px' && date.opacity === '0.6';\n            let h1Ok = h1Obj.fontWeight\
    \ === '600' && h1Obj.fontSize === '24px';\n            let pOk = pObj.fontWeight\
    \ === '400' && pObj.fontSize === '18px';\n\n            return dateOk && h1Ok\
    \ && pOk ?\n                correct() :\n                wrong(`Check fonts of\
    \ all elements of review article.`)\n        }),\n\n        // Test 23 - check\
    \ position of first reviews-list article grade\n        this.node.execute(async\
    \ () => {\n            let coords = await this.page.evaluate(async () => {\n \
    \               let obj = document.querySelector('#reviews-list article .grade');\n\
    \                return obj ? [obj.getBoundingClientRect().x, obj.getBoundingClientRect().y]\
    \ : [-1, -1];\n            });\n            return nonStrictCompare(coords[0],\
    \ 915, 5) && nonStrictCompare(coords[1], 1348) ?\n                correct() :\n\
    \                wrong(`Please, check position of your first .grade element of\
    \ article, your position - x=${coords[0]} and y=${coords[1]}.`)\n        }),\n\
    \        // Test 24 - check background and fonts of first reviews-list article\
    \ grade\n        this.page.execute(() => {\n            let styles = window.getComputedStyle(this.gradeObj[0]);\n\
    \            let spanStyle = window.getComputedStyle(document.querySelector('#reviews-list\
    \ article .grade span'));\n            return styles.backgroundImage && styles.fontSize\
    \ === '24px' && styles.fontWeight === '500' &&\n                spanStyle.fontSize\
    \ === '14px' && spanStyle.fontWeight === '300' ?\n                correct() :\n\
    \                wrong(`Check fonts and background of grade element in article.`)\n\
    \        }),\n        // Test 25 - check size of first reviews-list article grade\n\
    \        this.node.execute(async () => {\n            let coords = await this.page.evaluate(async\
    \ () => {\n                let obj = document.querySelector('#reviews-list article\
    \ .grade');\n                return obj ? [obj.getBoundingClientRect().width,\
    \ obj.getBoundingClientRect().height] : [-1, -1];\n            });\n         \
    \   return coords[0] === 72 && coords[1] === 93 ?\n                correct() :\n\
    \                wrong(`Please, check size of article grade. Now your project\
    \ has the following values of first reviews-list article grade: \n           \
    \     width=${coords[0]} and height=${coords[1]}.`)\n        }),\n\n        //Test\
    \ 27 - check click on reviews-button\n        this.node.execute(async () => {\n\
    \            await this.page.setViewport({width: 1440, height: 1200});\n     \
    \       const reviewsButton = await this.page.findAllBySelector('button');\n \
    \           await reviewsButton[1].click();\n            let scrollTop = await\
    \ this.page.evaluate(async () => {\n                return document.querySelectorAll('.section-header')[1].getBoundingClientRect().y;\n\
    \            });\n            return  Math.round(scrollTop) === 0 ?\n        \
    \        correct() :\n                wrong(`Make sure you don't forget to add\
    \ a scroll to the reviews section when you click on the \"Reviews\" button`);\n\
    \        }),\n    ]\n\n}\n\nit(\"Test stage\", async () => {\n        await new\
    \ Test().runTests()\n    }\n).timeout(30000);\n"
  learner_created: false
- name: src/style.css
  visible: true
  learner_created: true
- name: src/script.js
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/22776#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Wed, 14 Jun 2023 14:23:01 UTC"
record: 9
